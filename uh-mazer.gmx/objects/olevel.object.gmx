<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>slevelgen</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///CREATE THE LEVEL
//resize
room_width = (CELLWIDTH/16) * 720;
room_height = (CELLHEIGHT/16) * 720;

//set the grid width and height
var width = room_width div CELLWIDTH;
var height = room_height div CELLHEIGHT;
///crate grid
grid = ds_grid_create (width, height);

///fill the void
ds_grid_set_region (grid, 0, 0, width - 1, height - 1, VOID);

/// randomize the world
randomize ();

//create the controller at the center of the grid 
var cx = width div 2;
var cy = height div 2;

//create the player
instance_create (cx * CELLWIDTH + CELLWIDTH / 2, cy * CELLHEIGHT + CELLHEIGHT / 2, oplayer);

//give the controller a random direction
var cdir = irandom(3);

///odds variable to change direction
var odds = 1;

//create the level uning 1000 steps

repeat (1000) {
       //place a floor tile at the controller position
       grid [# cx, cy,] = FLOOR
       
       ///randomize the direction of the controller
       if irandom(odds) == odds {
          cdir = irandom (3);
       
       }
       ///move the controller
       var xdir = lengthdir_x (1, cdir * 90);
       var ydir = lengthdir_y (1, cdir * 90);
       cx += xdir;
       cy += ydir;
       
       instance_create (x, y, owall);
       //make sure we dont move outside the grid
       cx = clamp (cx, 1, width - 2);
       cy = clamp (cy, 1, height - 2);
}

for (var yy = 1; yy &lt; height - 1; yy++;) {
    for (var xx = 1; xx &lt; width - 1; xx++;) {
        if grid[# xx, yy] == FLOOR {
           ///check for walls
           if grid[# xx, yy] != FLOOR {
              grid[# xx + 1, yy] = WALL;
           }
           if grid[# xx - 1, yy] != FLOOR {
              grid[# xx - 1, yy] = WALL;
           }
           if grid[# xx, yy + 1] != FLOOR {
              grid[# xx, yy + 1] = WALL;
           }
           if grid[# xx, yy - 1] != FLOOR {
              grid[# xx, yy - 1] = WALL;
           }
        }
    }
}

///draw the level using the grid
for (var yy = 0; yy &lt; height; yy++) {
    for (var xx = 0; xx &lt; width; xx++){
        if grid[# xx, yy] == FLOOR {
           ///draw the floor
           tile_add (bfloor, 0, 0, CELLWIDTH, CELLHEIGHT, xx * CELLWIDTH, yy * CELLHEIGHT,1000);
        }
    }
}
/// get tile sizes
var tw = CELLWIDTH /  2;
var th = CELLHEIGHT / 2;

///add the tiles
for (var yy = 0; yy &lt; height * 2; yy ++) {
    for (var xx = 0; xx &lt; width * 2; xx++){
        if grid[# xx div 2, yy div 2] == FLOOR {
           ///get tiles x, y, and depth
           var tx = xx * tw;
           var ty = yy * th;
           var dpth = -ty + 2
           
           
           var right = grid[# (xx + 1) div 2, yy div 2] != FLOOR;
           var left = grid[# (xx - 1) div 2, yy div 2] != FLOOR;
           var top = grid[# xx div 2, (yy - 1) div 2] != FLOOR;
           var bottom = grid[# xx div 2, (yy + 1) div 2] != FLOOR;
           
           var topright = grid[# (xx + 1) div 2, (yy - 1) div 2] != FLOOR;
           var topleft = grid[# (xx - 1) div 2, (yy - 1) div 2] != FLOOR;
           var bottomright = grid[# (xx + 1) div 2, (yy + 1) div 2] != FLOOR;
           var bottomleft =  grid[# (xx - 1) div 2, (yy + 1) div 2] != FLOOR;
           
           if right {
              if bottom{
                 tile_add (bwalltiles, tw * 4, th * 1, tw, th, tx + tw, ty, dpth);
              
              }else if top {
                    if topright {
                       tile_add (bwalltiles, tw * 4, th * 0, tw, th, tx + tw, ty - th, dpth);
                    }else{
                          tile_add (bwalltiles, tw * 3, th * 0, tw, th, tx, ty - th, dpth);
                    }
                    tile_add (bwalltiles, tw * 0, th * 1, tw, th, tx + tw, ty, dpth);
                    
              
              }else{
              
                    tile_add (bwalltiles, tw * 0, th * 1, tw, th, tx + tw, ty, dpth);
              }
           }
           
           if left {
              if bottom {
                 tile_add (bwalltiles, tw * 3, th * 1, tw, th, tx - tw, ty, dpth)
              }else if top {
                    if topleft {
                       tile_add (bwalltiles, tw * 3, th * 0, tw, th, tx - tw, ty - th, dpth)
                    }else{
                       tile_add (bwalltiles, tw * 4, th * 0, tw, th, tx, ty - th, dpth)
                    }
                    tile_add (bwalltiles, tw * 2, th * 1, tw, th, tx - tw, ty, dpth)
              }else{
                    tile_add (bwalltiles, tw * 2, th * 1, tw, th, tx - tw, ty, dpth) 
              }
           }
           if top {
              if  !topright {
                  tile_add (bwalltiles, tw * 2, th * 2, tw, th, tx, ty - th, dpth)
              } else if !topleft {
                  tile_add (bwalltiles, tw * 0, th * 2, tw, th, tx, ty - th, dpth)
              }else{
                  tile_add (bwalltiles, tw * 1, th * 2, tw, th, tx, ty - th, dpth)
              }
           
           }
           
           if bottom {
              if  !bottomright {
                  tile_add (bwalltiles, tw * 2, th * 0, tw, th, tx, ty, dpth)
              } else if !bottomleft {
                  tile_add (bwalltiles, tw * 0, th * 0, tw, th, tx, ty, dpth)
              }else{
                  tile_add (bwalltiles, tw * 1, th * 0, tw, th, tx, ty, dpth)
              }
           
           }
           
           
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///restart room
room_restart ();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
